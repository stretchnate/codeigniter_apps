<?php
/**
 * Created by PhpStorm.
 * User: stretch
 * Date: 4/6/18
 * Time: 2:59 AM
 */

namespace Plaid\Connection;


class ValuesTest extends \CITest {

    const TEST_ITEM_ID = '1';

    const TEST_ACCOUNT_ID = 1;

    const TEST_ACCESS_TOKEN = 'lfjweifjwodksjdk';

    const TEST_TRANSACTIONS_READY = 'NONE';

    const TEST_DT_ADDED = '2018-04-06';

    public function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @covers Values::setItemId
     * @covers Values::getItemId
     * @return Values
     * @throws \Exception
     */
    public function testGetItemId() {
        $values = new Values();

        $values->setItemId(self::TEST_ITEM_ID);

        $this->assertEquals(self::TEST_ITEM_ID, $values->getItemId());

        return $values;
    }

    /**
     * @covers Values::setItemId
     * @depends testGetItemId
     * @expectedException \Exception
     * @param Values $values
     */
    public function testSetItemIdException($values) {
        $values->setItemId(2);
    }

    /**
     * @covers Values::setAccountId
     * @covers Values::getAccountId
     * @depends testGetItemId
     * @param Values $values
     * @return Values
     */
    public function testGetAccountId($values) {
        $values->setAccountId(self::TEST_ACCOUNT_ID);

        $this->assertEquals(self::TEST_ACCOUNT_ID, $values->getAccountId());

        return $values;
    }

    /**
     * @covers Values::setAccountId
     * @expectedException \InvalidArgumentException
     */
    public function testSetAccountIdException() {
        $values = new Values();

        $values->setAccountId('larry');
    }

    /**
     * @covers Values::setAccessToken
     * @covers Values::getAccessToken
     * @depends testGetAccountId
     * @param Values $values
     * @return Values
     */
    public function testGetAccessToken($values) {
        $values->setAccessToken(self::TEST_ACCESS_TOKEN);

        $this->assertEquals(self::TEST_ACCESS_TOKEN, $values->getAccessToken());

        return $values;
    }

    /**
     * @covers Values::setAccessToken
     * @expectedException \InvalidArgumentException
     */
    public function testSetAccessTokenException() {
        $values = new Values();

        $values->setAccessToken(self::TEST_ACCOUNT_ID);
    }

    /**
     * @covers Values::setTransactionsReady
     * @covers Values::getTransactionsReady
     * @depends testGetAccessToken
     * @param Values $values
     * @return Values
     */
    public function testGetTransactionsReady($values) {
        $values->setTransactionsReady(self::TEST_TRANSACTIONS_READY);

        $this->assertEquals(self::TEST_TRANSACTIONS_READY, $values->getTransactionsReady());

        return $values;
    }

    /**
     * @covers Values::setTransactionsReady
     * @expectedException \InvalidArgumentException
     */
    public function testSetTransactionsReadyException() {
        $values = new Values();

        $values->setTransactionsReady(self::TEST_ACCOUNT_ID);
    }

    /**
     * @covers Values::setDtAdded
     * @covers Values::getDtAdded
     * @depends testGetTransactionsReady
     * @param Values $values
     */
    public function testGetDateAdded($values) {
        $date = new \DateTime(self::TEST_DT_ADDED);
        $values->setDtAdded($date);

        $this->assertInstanceOf('\DateTime', $values->getDtAdded());
    }

    /**
     * @covers Values::setDtAdded
     * @expectedException \TypeError
     */
    public function testSetDateAddedException() {
        $values = new Values();

        $values->setDtAdded(self::TEST_DT_ADDED);
    }
}